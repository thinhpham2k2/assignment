name: docker-compose
services:
  database:
    container_name: database-mysql
    image: mysql:8.0.40-debian
    ports:
      - "8000:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=12345
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "database-mysql" ]
      interval: 7s
      timeout: 5s
      retries: 3
    networks:
      - microservice_networks

  core:
    container_name: core-service
    build:
      context: ./core-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DB_USERNAME=root
      - DB_PASSWORD=12345
      - DB_URL=jdbc:mysql://database:3306/core_db
      - DOCKER_HOST=host.docker.internal
      - RABBITMQ_USER=root
      - RABBITMQ_PASS=12345
    depends_on:
      database:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - microservice_networks

  auth:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DB_USERNAME=root
      - DB_PASSWORD=12345
      - DB_URL=jdbc:mysql://database:3306/auth_db
      - DOCKER_HOST=host.docker.internal
      - RABBITMQ_USER=root
      - RABBITMQ_PASS=12345
    depends_on:
      database:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - microservice_networks

  gateway:
    container_name: gateway-service
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      - DOCKER_HOST=host.docker.internal
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
      auth:
        condition: service_started
      core:
        condition: service_started
    networks:
      - microservice_networks

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=12345
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 7s
      timeout: 5s
      retries: 3
    networks:
      - microservice_networks

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    environment:
      - RABBIT_ADDRESSES=host.docker.internal:5672
      - RABBIT_USER=root
      - RABBIT_PASSWORD=12345
      - STORAGE_TYPE=mem
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservice_networks

  vault:
    container_name: vault
    image: hashicorp/vault:latest
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=0000
      - VAULT_TOKEN=0000
    volumes:
      - ./init-vault.sh:/init-vault.sh:rw
    cap_add:
      - IPC_LOCK
    command: ["sh", "-c", "vault server -dev -dev-listen-address=0.0.0.0:8200 & sleep 5 && /init-vault.sh && tail -f /dev/null"]
    networks:
      - microservice_networks

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    command: ["bash", "-c", "redis-server --appendonly yes --requirepass 12345"]
    volumes:
      - cache:/data
    networks:
      - microservice_networks

  prometheus:
    container_name: prometheus
    image: bitnami/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservice_networks

volumes:
  cache:
    driver: local

networks:
  microservice_networks:
    driver: bridge